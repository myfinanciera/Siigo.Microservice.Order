// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	cqrs "dev.azure.com/SiigoDevOps/Siigo/_git/go-cqrs.git/cqrs"
	mock "github.com/stretchr/testify/mock"

	order "siigo.com/order/src/domain/order"

	uuid "dev.azure.com/SiigoDevOps/Siigo/_git/go-cqrs.git/cqrs/uuid"
)

// IOrderService is an autogenerated mock type for the IOrderService type
type IOrderService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *IOrderService) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *IOrderService) Get(id uuid.UUID) (*order.Order, error) {
	ret := _m.Called(id)

	var r0 *order.Order
	if rf, ok := ret.Get(0).(func(uuid.UUID) *order.Order); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadAll provides a mock function with given fields:
func (_m *IOrderService) LoadAll() ([]*order.Order, error) {
	ret := _m.Called()

	var r0 []*order.Order
	if rf, ok := ret.Get(0).(func() []*order.Order); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*order.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: aggregate, expectedVersion
func (_m *IOrderService) Save(aggregate cqrs.AggregateRoot, expectedVersion *int) error {
	ret := _m.Called(aggregate, expectedVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(cqrs.AggregateRoot, *int) error); ok {
		r0 = rf(aggregate, expectedVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: aggregate, expectedVersion
func (_m *IOrderService) Update(aggregate cqrs.AggregateRoot, expectedVersion *int) error {
	ret := _m.Called(aggregate, expectedVersion)

	var r0 error
	if rf, ok := ret.Get(0).(func(cqrs.AggregateRoot, *int) error); ok {
		r0 = rf(aggregate, expectedVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIOrderService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderService creates a new instance of IOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderService(t mockConstructorTestingTNewIOrderService) *IOrderService {
	mock := &IOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
