// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	orderv1 "siigo.com/order/src/api/proto/order/v1"
)

// OrderServiceServer is an autogenerated mock type for the OrderServiceServer type
type OrderServiceServer struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: _a0, _a1
func (_m *OrderServiceServer) AddOrder(_a0 context.Context, _a1 *orderv1.AddOrderRequest) (*orderv1.AddOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *orderv1.AddOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *orderv1.AddOrderRequest) *orderv1.AddOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.AddOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *orderv1.AddOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrder provides a mock function with given fields: _a0, _a1
func (_m *OrderServiceServer) DeleteOrder(_a0 context.Context, _a1 *orderv1.DeleteOrderRequest) (*orderv1.DeleteOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *orderv1.DeleteOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *orderv1.DeleteOrderRequest) *orderv1.DeleteOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.DeleteOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *orderv1.DeleteOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrders provides a mock function with given fields: _a0, _a1
func (_m *OrderServiceServer) FindOrders(_a0 context.Context, _a1 *emptypb.Empty) (*orderv1.FindOrdersResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *orderv1.FindOrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *orderv1.FindOrdersResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.FindOrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: _a0, _a1
func (_m *OrderServiceServer) GetOrder(_a0 context.Context, _a1 *orderv1.GetOrderRequest) (*orderv1.GetOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *orderv1.GetOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *orderv1.GetOrderRequest) *orderv1.GetOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.GetOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *orderv1.GetOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: _a0, _a1
func (_m *OrderServiceServer) UpdateOrder(_a0 context.Context, _a1 *orderv1.UpdateOrderRequest) (*orderv1.UpdateOrderResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *orderv1.UpdateOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *orderv1.UpdateOrderRequest) *orderv1.UpdateOrderResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.UpdateOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *orderv1.UpdateOrderRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderServiceServer creates a new instance of OrderServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderServiceServer(t mockConstructorTestingTNewOrderServiceServer) *OrderServiceServer {
	mock := &OrderServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
