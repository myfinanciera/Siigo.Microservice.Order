// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	orderv1 "siigo.com/order/src/api/proto/order/v1"
)

// OrderServiceClient is an autogenerated mock type for the OrderServiceClient type
type OrderServiceClient struct {
	mock.Mock
}

// AddOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderServiceClient) AddOrder(ctx context.Context, in *orderv1.AddOrderRequest, opts ...grpc.CallOption) (*orderv1.AddOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orderv1.AddOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *orderv1.AddOrderRequest, ...grpc.CallOption) *orderv1.AddOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.AddOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *orderv1.AddOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderServiceClient) DeleteOrder(ctx context.Context, in *orderv1.DeleteOrderRequest, opts ...grpc.CallOption) (*orderv1.DeleteOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orderv1.DeleteOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *orderv1.DeleteOrderRequest, ...grpc.CallOption) *orderv1.DeleteOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.DeleteOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *orderv1.DeleteOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOrders provides a mock function with given fields: ctx, in, opts
func (_m *OrderServiceClient) FindOrders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*orderv1.FindOrdersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orderv1.FindOrdersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *orderv1.FindOrdersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.FindOrdersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderServiceClient) GetOrder(ctx context.Context, in *orderv1.GetOrderRequest, opts ...grpc.CallOption) (*orderv1.GetOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orderv1.GetOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *orderv1.GetOrderRequest, ...grpc.CallOption) *orderv1.GetOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.GetOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *orderv1.GetOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, in, opts
func (_m *OrderServiceClient) UpdateOrder(ctx context.Context, in *orderv1.UpdateOrderRequest, opts ...grpc.CallOption) (*orderv1.UpdateOrderResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *orderv1.UpdateOrderResponse
	if rf, ok := ret.Get(0).(func(context.Context, *orderv1.UpdateOrderRequest, ...grpc.CallOption) *orderv1.UpdateOrderResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderv1.UpdateOrderResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *orderv1.UpdateOrderRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderServiceClient creates a new instance of OrderServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderServiceClient(t mockConstructorTestingTNewOrderServiceClient) *OrderServiceClient {
	mock := &OrderServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
